//Date - 09/02/2024
//Memoization
class Solution {
public:
    vector<int> ans;
    int solve(vector<int>& nums,int idx,int prev,vector<int> tmp,vector<vector<int>>& dp)
    {
        if(idx>=nums.size())
        {
            if(tmp.size()>ans.size())
                ans = tmp;
            return 0;
        }
        if(dp[idx][prev+1]!=-1)
            return dp[idx][prev+1];
        int take = 0;
        if(prev==-1 || nums[idx]%nums[prev]==0)
        {
            tmp.push_back(nums[idx]);
            take = 1 + solve(nums,idx+1,idx,tmp,dp);
            tmp.pop_back();
        }
        int notTake = solve(nums,idx+1,prev,tmp,dp);
        return dp[idx][prev+1] = max(take,notTake);
    }
    vector<int> largestDivisibleSubset(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        int n = nums.size();
        vector<vector<int>> dp(n,vector<int>(n+1,-1));
        vector<int> tmp;
        solve(nums,0,-1,tmp,dp);
        return ans; 
    }
};


//tabulation
class Solution {
public:
    vector<int> largestDivisibleSubset(vector<int>& nums) {
        int n = nums.size();
        sort(nums.begin(), nums.end());

        vector<int> dp(n, 1);
        vector<int> prev(n, -1);
        
        int max_ind = 0;
        
        for(int i=1; i<n; i++) 
        {
            for(int j=0; j<i; j++) 
            {
                if(nums[i]%nums[j]==0 and dp[i] < dp[j] + 1) 
                {
                    dp[i] = dp[j]+1;
                    prev[i] = j;
                }
            }
            if(dp[i] > dp[max_ind]) 
            {
                max_ind = i;
            }
        }
        
        vector<int> ans;  
        while(max_ind>=0) 
        {
            ans.push_back(nums[max_ind]);
            max_ind = prev[max_ind];
        }  
        return ans;  
    }
};
